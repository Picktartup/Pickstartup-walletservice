package com.picktartup.wallet.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class StartupFunding extends Contract {
    public static final String BINARY = "608060405234801561000f575f80fd5b50604051613285380380613285833981810160405281019061003191906101c2565b60015f8190555061005461004961009a60201b60201c565b6100a160201b60201c565b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101ed565b5f33905090565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61019182610168565b9050919050565b6101a181610187565b81146101ab575f80fd5b50565b5f815190506101bc81610198565b92915050565b5f602082840312156101d7576101d6610164565b5b5f6101e4848285016101ae565b91505092915050565b61308b806101fa5f395ff3fe608060405234801561000f575f80fd5b50600436106100fe575f3560e01c8063715018a611610095578063d87aa64311610064578063d87aa643146102b6578063eb044b97146102d2578063ec39402f14610304578063f2fde38b14610322576100fe565b8063715018a6146102405780637274e30d1461024a5780638da5cb5b146102685780639304d12414610286576100fe565b8063598bd107116100d1578063598bd107146101a15780635e247015146101bf5780636b5ca27d146101f15780636c19e0041461020d576100fe565b80630235cacc14610102578063141961bc14610132578063278ecde1146101695780632f940c7014610185575b5f80fd5b61011c60048036038101906101179190611a70565b61033e565b6040516101299190611aaa565b60405180910390f35b61014c60048036038101906101479190611a70565b610353565b604051610160989796959493929190611be5565b60405180910390f35b610183600480360381019061017e9190611a70565b6104ce565b005b61019f600480360381019061019a9190611caa565b6107e0565b005b6101a9610a95565b6040516101b69190611d43565b60405180910390f35b6101d960048036038101906101d49190611caa565b610aba565b6040516101e893929190611d5c565b60405180910390f35b61020b60048036038101906102069190611a70565b610b5c565b005b61022760048036038101906102229190611a70565b610cac565b6040516102379493929190611d91565b60405180910390f35b610248610d16565b005b610252610d29565b60405161025f9190611aaa565b60405180910390f35b610270610d2f565b60405161027d9190611de3565b60405180910390f35b6102a0600480360381019061029b9190611f52565b610d57565b6040516102ad9190611aaa565b60405180910390f35b6102d060048036038101906102cb9190612001565b610f8d565b005b6102ec60048036038101906102e79190611a70565b611452565b6040516102fb93929190611d5c565b60405180910390f35b61030c6114a7565b6040516103199190611aaa565b60405180910390f35b61033c6004803603810190610337919061203f565b611546565b005b6003602052805f5260405f205f915090505481565b6004602052805f5260405f205f91509050805f01805461037290612097565b80601f016020809104026020016040519081016040528092919081815260200182805461039e90612097565b80156103e95780601f106103c0576101008083540402835291602001916103e9565b820191905f5260205f20905b8154815290600101906020018083116103cc57829003601f168201915b5050505050908060010180546103fe90612097565b80601f016020809104026020016040519081016040528092919081815260200182805461042a90612097565b80156104755780601f1061044c57610100808354040283529160200191610475565b820191905f5260205f20905b81548152906001019060200180831161045857829003601f168201915b505050505090806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003015490806004015490806005015490806006015490806007015f9054906101000a900460ff16905088565b6104d66115c8565b5f60045f8381526020019081526020015f209050600260038111156104fe576104fd611b72565b5b816007015f9054906101000a900460ff16600381111561052157610520611b72565b5b1480610560575060038081111561053b5761053a611b72565b5b816007015f9054906101000a900460ff16600381111561055e5761055d611b72565b5b145b61059f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059690612111565b60405180910390fd5b5f816008015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f8111610624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061b90612179565b60405180910390fd5b5f826008015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555080826004015f82825461067b91906121c4565b925050819055508060035f8581526020019081526020015f205f8282546106a291906121c4565b9250508190555060025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016107059291906121f7565b6020604051808303815f875af1158015610721573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107459190612253565b610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077b906122c8565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16837f79ff6a60b3e21b3630b207e2a7b0b50b69b197d3d7ca776108ed2afb8fbac8dc836040516107cb9190611aaa565b60405180910390a350506107dd611615565b50565b6107e861161e565b5f60045f8481526020019081526020015f2090505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361086a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086190612330565b60405180910390fd5b5f600381111561087d5761087c611b72565b5b816007015f9054906101000a900460ff1660038111156108a05761089f611b72565b5b146108e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d790612398565b60405180910390fd5b5f60035f8581526020019081526020015f205490505f8111610937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092e90612400565b60405180910390fd5b6003826007015f6101000a81548160ff0219169083600381111561095e5761095d611b72565b5b02179055505f60035f8681526020019081526020015f2081905550837f4a9dc567040091de5a540ecdf7e368d428135090667d6044eac18680686eda466003836040516109ac92919061241e565b60405180910390a260025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b8152600401610a109291906121f7565b6020604051808303815f875af1158015610a2c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a509190612253565b610a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a869061248f565b60405180910390fd5b50505050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f805f8060045f8781526020019081526020015f2090505f816008015f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f80836004015411610b26575f610b43565b8260040154606483610b3891906124ad565b610b42919061251b565b5b9050818360040154829550955095505050509250925092565b5f60045f8381526020019081526020015f2090505f6003811115610b8357610b82611b72565b5b816007015f9054906101000a900460ff166003811115610ba657610ba5611b72565b5b14610be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdd90612398565b60405180910390fd5b80600601544211610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2390612595565b60405180910390fd5b806003015481600401541015610ca8576002816007015f6101000a81548160ff02191690836003811115610c6357610c62611b72565b5b0217905550817f4a9dc567040091de5a540ecdf7e368d428135090667d6044eac18680686eda4660028360040154604051610c9f92919061241e565b60405180910390a25b5050565b5f805f805f60045f8781526020019081526020015f2090505f81600601544210610cd6575f610ce7565b428260060154610ce691906121c4565b5b9050816007015f9054906101000a900460ff168260050154836006015483955095509550955050509193509193565b610d1e61161e565b610d275f61169c565b565b60055481565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f610d6061161e565b5f8311610da2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d99906125fd565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610e10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0790612665565b60405180910390fd5b5f8211610e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e49906126cd565b60405180910390fd5b5f60055f815480929190610e65906126eb565b9190505590505f60045f8381526020019081526020015f2090505f4290505f8582610e909190612732565b905089835f019081610ea291906128f9565b5088836001019081610eb491906128f9565b5087836002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508683600301819055508183600501819055508083600601819055505f836007015f6101000a81548160ff02191690836003811115610f3857610f37611b72565b5b0217905550837fe92d6718a0ac4baabacc3b2953f77d08edce2dca723cdf872527948e830dbf968b8a8a8686604051610f759594939291906129e8565b60405180910390a28394505050505095945050505050565b610f956115c8565b5f60045f8481526020019081526020015f2090505f6003811115610fbc57610fbb611b72565b5b816007015f9054906101000a900460ff166003811115610fdf57610fde611b72565b5b1461101f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101690612a8a565b60405180910390fd5b8060050154421015611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d90612af2565b60405180910390fd5b80600601544211156110ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a490612b5a565b60405180910390fd5b5f82116110ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e690612bc2565b60405180910390fd5b5f8282600401546111009190612732565b90508160030154811115611149576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114090612c2a565b60405180910390fd5b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016111a6929190612c48565b602060405180830381865afa1580156111c1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111e59190612c83565b90508381101561122a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122190612cf8565b60405180910390fd5b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161128893929190612d16565b6020604051808303815f875af11580156112a4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112c89190612253565b611307576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fe90612d95565b60405180910390fd5b8360035f8781526020019081526020015f205f8282546113279190612732565b9250508190555083836008015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461137c9190612732565b9250508190555083836004015f8282546113969190612732565b92505081905550847f55e04c751a8861bd9dc732357d21dd5efda11472fa826209b5dfb8cc73507f39856040516113cd9190611aaa565b60405180910390a23373ffffffffffffffffffffffffffffffffffffffff16857ff31343540affa723d26848192c2f28ab76925951531440b6f2e082030394314f868660040154604051611422929190612db3565b60405180910390a38260030154836004015403611443576114428561175f565b5b50505061144e611615565b5050565b5f805f8060045f8681526020019081526020015f2090505f8160040154826003015461147e91906121c4565b9050816003015460035f8881526020019081526020015f20548294509450945050509193909250565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115029190611de3565b602060405180830381865afa15801561151d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115419190612c83565b905090565b61154e61161e565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b390612e4a565b60405180910390fd5b6115c58161169c565b50565b60025f540361160c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160390612eb2565b60405180910390fd5b60025f81905550565b60015f81905550565b611626611a25565b73ffffffffffffffffffffffffffffffffffffffff16611644610d2f565b73ffffffffffffffffffffffffffffffffffffffff161461169a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169190612f1a565b60405180910390fd5b565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f60045f8381526020019081526020015f2090505f600381111561178657611785611b72565b5b816007015f9054906101000a900460ff1660038111156117a9576117a8611b72565b5b146117e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e090612398565b60405180910390fd5b8060030154816004015414611833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182a90612f82565b60405180910390fd5b6001816007015f6101000a81548160ff0219169083600381111561185a57611859611b72565b5b02179055505f60035f8481526020019081526020015f205490505f60035f8581526020019081526020015f208190555060025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb836002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611909929190612fa0565b6020604051808303815f875af1158015611925573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119499190612253565b611988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197f90613037565b60405180910390fd5b827fb7a8a87ea62a7f7288e67f1346345dfdbdf8f6fdbf978cf05f5914699b6ad07d836002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040516119dd929190612fa0565b60405180910390a2827f4a9dc567040091de5a540ecdf7e368d428135090667d6044eac18680686eda46600183604051611a1892919061241e565b60405180910390a2505050565b5f33905090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b611a4f81611a3d565b8114611a59575f80fd5b50565b5f81359050611a6a81611a46565b92915050565b5f60208284031215611a8557611a84611a35565b5b5f611a9284828501611a5c565b91505092915050565b611aa481611a3d565b82525050565b5f602082019050611abd5f830184611a9b565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611b0582611ac3565b611b0f8185611acd565b9350611b1f818560208601611add565b611b2881611aeb565b840191505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611b5c82611b33565b9050919050565b611b6c81611b52565b82525050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60048110611bb057611baf611b72565b5b50565b5f819050611bc082611b9f565b919050565b5f611bcf82611bb3565b9050919050565b611bdf81611bc5565b82525050565b5f610100820190508181035f830152611bfe818b611afb565b90508181036020830152611c12818a611afb565b9050611c216040830189611b63565b611c2e6060830188611a9b565b611c3b6080830187611a9b565b611c4860a0830186611a9b565b611c5560c0830185611a9b565b611c6260e0830184611bd6565b9998505050505050505050565b5f611c7982611b33565b9050919050565b611c8981611c6f565b8114611c93575f80fd5b50565b5f81359050611ca481611c80565b92915050565b5f8060408385031215611cc057611cbf611a35565b5b5f611ccd85828601611a5c565b9250506020611cde85828601611c96565b9150509250929050565b5f819050919050565b5f611d0b611d06611d0184611b33565b611ce8565b611b33565b9050919050565b5f611d1c82611cf1565b9050919050565b5f611d2d82611d12565b9050919050565b611d3d81611d23565b82525050565b5f602082019050611d565f830184611d34565b92915050565b5f606082019050611d6f5f830186611a9b565b611d7c6020830185611a9b565b611d896040830184611a9b565b949350505050565b5f608082019050611da45f830187611bd6565b611db16020830186611a9b565b611dbe6040830185611a9b565b611dcb6060830184611a9b565b95945050505050565b611ddd81611c6f565b82525050565b5f602082019050611df65f830184611dd4565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611e3a82611aeb565b810181811067ffffffffffffffff82111715611e5957611e58611e04565b5b80604052505050565b5f611e6b611a2c565b9050611e778282611e31565b919050565b5f67ffffffffffffffff821115611e9657611e95611e04565b5b611e9f82611aeb565b9050602081019050919050565b828183375f83830152505050565b5f611ecc611ec784611e7c565b611e62565b905082815260208101848484011115611ee857611ee7611e00565b5b611ef3848285611eac565b509392505050565b5f82601f830112611f0f57611f0e611dfc565b5b8135611f1f848260208601611eba565b91505092915050565b611f3181611b52565b8114611f3b575f80fd5b50565b5f81359050611f4c81611f28565b92915050565b5f805f805f60a08688031215611f6b57611f6a611a35565b5b5f86013567ffffffffffffffff811115611f8857611f87611a39565b5b611f9488828901611efb565b955050602086013567ffffffffffffffff811115611fb557611fb4611a39565b5b611fc188828901611efb565b9450506040611fd288828901611f3e565b9350506060611fe388828901611a5c565b9250506080611ff488828901611a5c565b9150509295509295909350565b5f806040838503121561201757612016611a35565b5b5f61202485828601611a5c565b925050602061203585828601611a5c565b9150509250929050565b5f6020828403121561205457612053611a35565b5b5f61206184828501611c96565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806120ae57607f821691505b6020821081036120c1576120c061206a565b5b50919050565b7f43616d706169676e206e6f74206661696c6564206f722063616e63656c6c65645f82015250565b5f6120fb602083611acd565b9150612106826120c7565b602082019050919050565b5f6020820190508181035f830152612128816120ef565b9050919050565b7f4e6f20696e766573746d656e7420746f20726566756e640000000000000000005f82015250565b5f612163601783611acd565b915061216e8261212f565b602082019050919050565b5f6020820190508181035f83015261219081612157565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6121ce82611a3d565b91506121d983611a3d565b92508282039050818111156121f1576121f0612197565b5b92915050565b5f60408201905061220a5f830185611dd4565b6122176020830184611a9b565b9392505050565b5f8115159050919050565b6122328161221e565b811461223c575f80fd5b50565b5f8151905061224d81612229565b92915050565b5f6020828403121561226857612267611a35565b5b5f6122758482850161223f565b91505092915050565b7f526566756e64206661696c6564000000000000000000000000000000000000005f82015250565b5f6122b2600d83611acd565b91506122bd8261227e565b602082019050919050565b5f6020820190508181035f8301526122df816122a6565b9050919050565b7f496e76616c6964206164647265737300000000000000000000000000000000005f82015250565b5f61231a600f83611acd565b9150612325826122e6565b602082019050919050565b5f6020820190508181035f8301526123478161230e565b9050919050565b7f43616d706169676e206e6f7420616374697665000000000000000000000000005f82015250565b5f612382601383611acd565b915061238d8261234e565b602082019050919050565b5f6020820190508181035f8301526123af81612376565b9050919050565b7f4e6f20746f6b656e7320746f20776974686472617700000000000000000000005f82015250565b5f6123ea601583611acd565b91506123f5826123b6565b602082019050919050565b5f6020820190508181035f830152612417816123de565b9050919050565b5f6040820190506124315f830185611bd6565b61243e6020830184611a9b565b9392505050565b7f456d657267656e6379207769746864726177616c206661696c656400000000005f82015250565b5f612479601b83611acd565b915061248482612445565b602082019050919050565b5f6020820190508181035f8301526124a68161246d565b9050919050565b5f6124b782611a3d565b91506124c283611a3d565b92508282026124d081611a3d565b915082820484148315176124e7576124e6612197565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61252582611a3d565b915061253083611a3d565b9250826125405761253f6124ee565b5b828204905092915050565b7f43616d706169676e207374696c6c2061637469766500000000000000000000005f82015250565b5f61257f601583611acd565b915061258a8261254b565b602082019050919050565b5f6020820190508181035f8301526125ac81612573565b9050919050565b7f54617267657420616d6f756e74206d75737420626520706f73697469766500005f82015250565b5f6125e7601e83611acd565b91506125f2826125b3565b602082019050919050565b5f6020820190508181035f830152612614816125db565b9050919050565b7f496e76616c696420737461727475702077616c6c6574000000000000000000005f82015250565b5f61264f601683611acd565b915061265a8261261b565b602082019050919050565b5f6020820190508181035f83015261267c81612643565b9050919050565b7f4475726174696f6e206d75737420626520706f736974697665000000000000005f82015250565b5f6126b7601983611acd565b91506126c282612683565b602082019050919050565b5f6020820190508181035f8301526126e4816126ab565b9050919050565b5f6126f582611a3d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361272757612726612197565b5b600182019050919050565b5f61273c82611a3d565b915061274783611a3d565b925082820190508082111561275f5761275e612197565b5b92915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026127c17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612786565b6127cb8683612786565b95508019841693508086168417925050509392505050565b5f6127fd6127f86127f384611a3d565b611ce8565b611a3d565b9050919050565b5f819050919050565b612816836127e3565b61282a61282282612804565b848454612792565b825550505050565b5f90565b61283e612832565b61284981848461280d565b505050565b5b8181101561286c576128615f82612836565b60018101905061284f565b5050565b601f8211156128b15761288281612765565b61288b84612777565b8101602085101561289a578190505b6128ae6128a685612777565b83018261284e565b50505b505050565b5f82821c905092915050565b5f6128d15f19846008026128b6565b1980831691505092915050565b5f6128e983836128c2565b9150826002028217905092915050565b61290282611ac3565b67ffffffffffffffff81111561291b5761291a611e04565b5b6129258254612097565b612930828285612870565b5f60209050601f831160018114612961575f841561294f578287015190505b61295985826128de565b8655506129c0565b601f19841661296f86612765565b5f5b8281101561299657848901518255600182019150602085019450602081019050612971565b868310156129b357848901516129af601f8916826128c2565b8355505b6001600288020188555050505b505050505050565b5f6129d282611d12565b9050919050565b6129e2816129c8565b82525050565b5f60a0820190508181035f830152612a008188611afb565b9050612a0f60208301876129d9565b612a1c6040830186611a9b565b612a296060830185611a9b565b612a366080830184611a9b565b9695505050505050565b7f43616d706169676e206973206e6f7420616374697665000000000000000000005f82015250565b5f612a74601683611acd565b9150612a7f82612a40565b602082019050919050565b5f6020820190508181035f830152612aa181612a68565b9050919050565b7f43616d706169676e206e6f7420737461727465640000000000000000000000005f82015250565b5f612adc601483611acd565b9150612ae782612aa8565b602082019050919050565b5f6020820190508181035f830152612b0981612ad0565b9050919050565b7f43616d706169676e20656e6465640000000000000000000000000000000000005f82015250565b5f612b44600e83611acd565b9150612b4f82612b10565b602082019050919050565b5f6020820190508181035f830152612b7181612b38565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e20300000005f82015250565b5f612bac601d83611acd565b9150612bb782612b78565b602082019050919050565b5f6020820190508181035f830152612bd981612ba0565b9050919050565b7f576f756c64206578636565642074617267657420616d6f756e740000000000005f82015250565b5f612c14601a83611acd565b9150612c1f82612be0565b602082019050919050565b5f6020820190508181035f830152612c4181612c08565b9050919050565b5f604082019050612c5b5f830185611dd4565b612c686020830184611dd4565b9392505050565b5f81519050612c7d81611a46565b92915050565b5f60208284031215612c9857612c97611a35565b5b5f612ca584828501612c6f565b91505092915050565b7f496e73756666696369656e7420746f6b656e20616c6c6f77616e6365000000005f82015250565b5f612ce2601c83611acd565b9150612ced82612cae565b602082019050919050565b5f6020820190508181035f830152612d0f81612cd6565b9050919050565b5f606082019050612d295f830186611dd4565b612d366020830185611dd4565b612d436040830184611a9b565b949350505050565b7f546f6b656e207472616e73666572206661696c656400000000000000000000005f82015250565b5f612d7f601583611acd565b9150612d8a82612d4b565b602082019050919050565b5f6020820190508181035f830152612dac81612d73565b9050919050565b5f604082019050612dc65f830185611a9b565b612dd36020830184611a9b565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f612e34602683611acd565b9150612e3f82612dda565b604082019050919050565b5f6020820190508181035f830152612e6181612e28565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f612e9c601f83611acd565b9150612ea782612e68565b602082019050919050565b5f6020820190508181035f830152612ec981612e90565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f612f04602083611acd565b9150612f0f82612ed0565b602082019050919050565b5f6020820190508181035f830152612f3181612ef8565b9050919050565b7f546172676574206e6f74207265616368656400000000000000000000000000005f82015250565b5f612f6c601283611acd565b9150612f7782612f38565b602082019050919050565b5f6020820190508181035f830152612f9981612f60565b9050919050565b5f604082019050612fb35f8301856129d9565b612fc06020830184611a9b565b9392505050565b7f4661696c656420746f207472616e736665722066756e647320746f20737461725f8201527f7475700000000000000000000000000000000000000000000000000000000000602082015250565b5f613021602383611acd565b915061302c82612fc7565b604082019050919050565b5f6020820190508181035f83015261304e81613015565b905091905056fea2646970667358221220575f06eaa808fc433d010ad480ace131adb23a290fa75a60ec7e117c2138186f64736f6c634300081a0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_CAMPAIGNBALANCES = "campaignBalances";

    public static final String FUNC_CAMPAIGNCOUNT = "campaignCount";

    public static final String FUNC_CAMPAIGNS = "campaigns";

    public static final String FUNC_CREATECAMPAIGN = "createCampaign";

    public static final String FUNC_EMERGENCYWITHDRAW = "emergencyWithdraw";

    public static final String FUNC_FINALIZECAMPAIGN = "finalizeCampaign";

    public static final String FUNC_GETCAMPAIGNBALANCE = "getCampaignBalance";

    public static final String FUNC_GETCAMPAIGNSTATUS = "getCampaignStatus";

    public static final String FUNC_GETINVESTORSTATUS = "getInvestorStatus";

    public static final String FUNC_GETTOTALHELDTOKENS = "getTotalHeldTokens";

    public static final String FUNC_INVEST = "invest";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PICKENTOKEN = "pickenToken";

    public static final String FUNC_REFUND = "refund";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event CAMPAIGNCOMPLETED_EVENT = new Event("CampaignCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CAMPAIGNCREATED_EVENT = new Event("CampaignCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INVESTMENTMADE_EVENT = new Event("InvestmentMade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REFUNDPROCESSED_EVENT = new Event("RefundProcessed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TOKENSHELD_EVENT = new Event("TokensHeld", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TOKENSTRANSFERRED_EVENT = new Event("TokensTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected StartupFunding(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected StartupFunding(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected StartupFunding(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected StartupFunding(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<CampaignCompletedEventResponse> getCampaignCompletedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CAMPAIGNCOMPLETED_EVENT, transactionReceipt);
        ArrayList<CampaignCompletedEventResponse> responses = new ArrayList<CampaignCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CampaignCompletedEventResponse typedResponse = new CampaignCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.campaignId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.totalAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CampaignCompletedEventResponse getCampaignCompletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CAMPAIGNCOMPLETED_EVENT, log);
        CampaignCompletedEventResponse typedResponse = new CampaignCompletedEventResponse();
        typedResponse.log = log;
        typedResponse.campaignId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.totalAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<CampaignCompletedEventResponse> campaignCompletedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCampaignCompletedEventFromLog(log));
    }

    public Flowable<CampaignCompletedEventResponse> campaignCompletedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CAMPAIGNCOMPLETED_EVENT));
        return campaignCompletedEventFlowable(filter);
    }

    public static List<CampaignCreatedEventResponse> getCampaignCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CAMPAIGNCREATED_EVENT, transactionReceipt);
        ArrayList<CampaignCreatedEventResponse> responses = new ArrayList<CampaignCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CampaignCreatedEventResponse typedResponse = new CampaignCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.campaignId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.startupWallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.targetAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CampaignCreatedEventResponse getCampaignCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CAMPAIGNCREATED_EVENT, log);
        CampaignCreatedEventResponse typedResponse = new CampaignCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.campaignId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.startupWallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.targetAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<CampaignCreatedEventResponse> campaignCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCampaignCreatedEventFromLog(log));
    }

    public Flowable<CampaignCreatedEventResponse> campaignCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CAMPAIGNCREATED_EVENT));
        return campaignCreatedEventFlowable(filter);
    }

    public static List<InvestmentMadeEventResponse> getInvestmentMadeEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTMADE_EVENT, transactionReceipt);
        ArrayList<InvestmentMadeEventResponse> responses = new ArrayList<InvestmentMadeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentMadeEventResponse typedResponse = new InvestmentMadeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.campaignId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investor = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.totalRaised = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentMadeEventResponse getInvestmentMadeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTMADE_EVENT, log);
        InvestmentMadeEventResponse typedResponse = new InvestmentMadeEventResponse();
        typedResponse.log = log;
        typedResponse.campaignId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investor = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.totalRaised = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentMadeEventResponse> investmentMadeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentMadeEventFromLog(log));
    }

    public Flowable<InvestmentMadeEventResponse> investmentMadeEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTMADE_EVENT));
        return investmentMadeEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<RefundProcessedEventResponse> getRefundProcessedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REFUNDPROCESSED_EVENT, transactionReceipt);
        ArrayList<RefundProcessedEventResponse> responses = new ArrayList<RefundProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RefundProcessedEventResponse typedResponse = new RefundProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.campaignId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investor = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RefundProcessedEventResponse getRefundProcessedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REFUNDPROCESSED_EVENT, log);
        RefundProcessedEventResponse typedResponse = new RefundProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.campaignId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investor = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RefundProcessedEventResponse> refundProcessedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRefundProcessedEventFromLog(log));
    }

    public Flowable<RefundProcessedEventResponse> refundProcessedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REFUNDPROCESSED_EVENT));
        return refundProcessedEventFlowable(filter);
    }

    public static List<TokensHeldEventResponse> getTokensHeldEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TOKENSHELD_EVENT, transactionReceipt);
        ArrayList<TokensHeldEventResponse> responses = new ArrayList<TokensHeldEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokensHeldEventResponse typedResponse = new TokensHeldEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.campaignId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TokensHeldEventResponse getTokensHeldEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TOKENSHELD_EVENT, log);
        TokensHeldEventResponse typedResponse = new TokensHeldEventResponse();
        typedResponse.log = log;
        typedResponse.campaignId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TokensHeldEventResponse> tokensHeldEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTokensHeldEventFromLog(log));
    }

    public Flowable<TokensHeldEventResponse> tokensHeldEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENSHELD_EVENT));
        return tokensHeldEventFlowable(filter);
    }

    public static List<TokensTransferredEventResponse> getTokensTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TOKENSTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<TokensTransferredEventResponse> responses = new ArrayList<TokensTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokensTransferredEventResponse typedResponse = new TokensTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.campaignId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TokensTransferredEventResponse getTokensTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TOKENSTRANSFERRED_EVENT, log);
        TokensTransferredEventResponse typedResponse = new TokensTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.campaignId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<TokensTransferredEventResponse> tokensTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTokensTransferredEventFromLog(log));
    }

    public Flowable<TokensTransferredEventResponse> tokensTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENSTRANSFERRED_EVENT));
        return tokensTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> campaignBalances(BigInteger param0) {
        final Function function = new Function(FUNC_CAMPAIGNBALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> campaignCount() {
        final Function function = new Function(FUNC_CAMPAIGNCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple8<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> campaigns(
            BigInteger param0) {
        final Function function = new Function(FUNC_CAMPAIGNS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple8<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple8<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createCampaign(String _name, String _description,
            String _startupWallet, BigInteger _targetAmount, BigInteger _duration) {
        final Function function = new Function(
                FUNC_CREATECAMPAIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_description), 
                new org.web3j.abi.datatypes.Address(160, _startupWallet), 
                new org.web3j.abi.datatypes.generated.Uint256(_targetAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> emergencyWithdraw(BigInteger _campaignId,
            String _to) {
        final Function function = new Function(
                FUNC_EMERGENCYWITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_campaignId), 
                new org.web3j.abi.datatypes.Address(160, _to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finalizeCampaign(BigInteger _campaignId) {
        final Function function = new Function(
                FUNC_FINALIZECAMPAIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_campaignId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> getCampaignBalance(
            BigInteger _campaignId) {
        final Function function = new Function(FUNC_GETCAMPAIGNBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_campaignId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getCampaignStatus(
            BigInteger _campaignId) {
        final Function function = new Function(FUNC_GETCAMPAIGNSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_campaignId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> getInvestorStatus(
            BigInteger _campaignId, String _investor) {
        final Function function = new Function(FUNC_GETINVESTORSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_campaignId), 
                new org.web3j.abi.datatypes.Address(160, _investor)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getTotalHeldTokens() {
        final Function function = new Function(FUNC_GETTOTALHELDTOKENS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> invest(BigInteger _campaignId,
            BigInteger _amount) {
        final Function function = new Function(
                FUNC_INVEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_campaignId), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> pickenToken() {
        final Function function = new Function(FUNC_PICKENTOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> refund(BigInteger _campaignId) {
        final Function function = new Function(
                FUNC_REFUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_campaignId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static StartupFunding load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new StartupFunding(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static StartupFunding load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new StartupFunding(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static StartupFunding load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new StartupFunding(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static StartupFunding load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new StartupFunding(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<StartupFunding> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String _pickenToken) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _pickenToken)));
        return deployRemoteCall(StartupFunding.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<StartupFunding> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            String _pickenToken) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _pickenToken)));
        return deployRemoteCall(StartupFunding.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<StartupFunding> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String _pickenToken) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _pickenToken)));
        return deployRemoteCall(StartupFunding.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<StartupFunding> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            String _pickenToken) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _pickenToken)));
        return deployRemoteCall(StartupFunding.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class CampaignCompletedEventResponse extends BaseEventResponse {
        public BigInteger campaignId;

        public BigInteger status;

        public BigInteger totalAmount;
    }

    public static class CampaignCreatedEventResponse extends BaseEventResponse {
        public BigInteger campaignId;

        public String name;

        public String startupWallet;

        public BigInteger targetAmount;

        public BigInteger startTime;

        public BigInteger endTime;
    }

    public static class InvestmentMadeEventResponse extends BaseEventResponse {
        public BigInteger campaignId;

        public String investor;

        public BigInteger amount;

        public BigInteger totalRaised;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RefundProcessedEventResponse extends BaseEventResponse {
        public BigInteger campaignId;

        public String investor;

        public BigInteger amount;
    }

    public static class TokensHeldEventResponse extends BaseEventResponse {
        public BigInteger campaignId;

        public BigInteger amount;
    }

    public static class TokensTransferredEventResponse extends BaseEventResponse {
        public BigInteger campaignId;

        public String to;

        public BigInteger amount;
    }
}
